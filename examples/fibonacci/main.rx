/*
 * Program to calculate fibonacci numbers using dynamic programming 
 */

const std = rex.import("std");

var cache = [50]int{0, 1, 1, -1, ...};

const fibonacci = (n: int) -> int {
    if n < 0 {
        return 0;
    } else if cache[n] != -1 {
        return cache[n];
    } else {
        cache[n] = fibonacci(n-1) + fibonacci(n-2);
        return cache[n];
    }
}

const main = () -> Result((), any) {
    /* 
    use {parse_int as parse} from std;

    let n = std.io.getline()
        .parse().!;
    */
    
    let n = std.io.gets()
        |> std.parse_int() 
        |> !;

    let value = fibonacci(n);

    std.io.println("Fibonacci number {} is {}", n, value);

    return ();
}
