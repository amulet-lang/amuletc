pub fn fibonacci -> int = n do
    let mut cache = [50]{0, 1, 1, -1, ..};
    return _fibonacci(n, mut& cache); 
end

rec fn _fibonacci -> int = (
    n: int, 
    mut& arr: []int
) do
    return match n do
        | n when cache[n] != -1 => cache[n],
        | n when n < 0          => 0,
        | n => do
            cache[n] := fibonacci(n-1) + fibonacci(n-2)
        end
    end
end

test `fibonacci` -> Result((), any) = () do
    use std;

    let result = fibonacci(5);
    std.testing.assert!(result == 5).!;

    return () |> Ok;
end
