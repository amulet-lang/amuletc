const Num = interface ('a) {
    add: ('a) -> 'a
}

const num -> type = (comptime 'a: type) do
    pub const (lhs: 'a).add -> 'a = (rhs: 'a) do
        mut result = 'a.{}

        for f in @type_info('a).Record.fields do
            @field(result, f) = @field(lhs, f) + @field(rhs, f)
        end
    end

    'a
end

const Vector = record { x: isize, y: isize }
    |> num()

const new = (x, y) do
    Vector.{ x, y }
end

const add -> Num = (x, y: Num) do
    x.add(y)
end

const main -> @result(unit) = () do
    let a = new(10, 5)
    let b = new(5, 10)
    let c = a.add(b)

    @assert(c.x == 15 and c.y == 15).!
    @assert(@typeOf(a), @typeOf(c)).!

    let d = 10
    let e = 5
    let f = add(d, e)

    @assert(f == 15).!
end
