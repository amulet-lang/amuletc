const string = @import("std").string

const @result -> type = (comptime success: type) do
    enum {
        Ok(success),
        Err(Error) // predefined interface
    }
end

const parseError = enum {
    invalidUTF8
}

// Implement the methods required by the Error interface
const (err: parseError).msg      -> string   = () do/* */end
const (err: parseError).location -> string   = () do/* */end
const (err: parseError).kind     -> string   = () do/* */end
const (err: parseError).severity -> severity = () do/* */end

const parse -> @result(isize) = (str: []u8) do
    let word = /* */
    if word do
        /* */
    else do
        return Err <| parseError.invalidUTF8
    end
end

const main -> @result(unit) = () do
    let str: string = "Hello"
    let result = parse(str[..]).!
    @print("result: #{result}\n")
end
