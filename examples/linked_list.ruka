const List -> type = (comptime 'a: type) do
    record {
        pub const t = record {
            const Self = @this()

            val: 'a,
            next: @option(Self)
        }

        pub fn new -> t = (val: 'a) do
            t.{ val, next = none }
        end

        pub fn (mut t).push = (val: 'a) do
            if self.next do
                var current = self.next
                while current.next do
                    current = current.next
                end

                current.next = t.new(val)
            else do
                self.next = t.new(val)
            end
        end
    }
end

const main = () do
    var list = List(isize).new(12)
    list.push(16)

    @printf("List: [{}, {}]\n", {list.val, list.next.?.val})
end
