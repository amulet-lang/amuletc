/*
 *
 */

pub const Buffer = @import("buffer.ruka")
pub const io = @import("io.ruka")

pub const Vector = module {
    pub const t = record {
        x: u8,
        y: u8,
        pvt z: u8
    }

    pub fn new = (x, y) do
        t.{ x, y, 0 }
    end

    pub fn add = (self: t, other: t) do
        t.{
            x = self.x + other.x,
            y = self.y + other.y,
            z = self.z + other.z
        }
    end

    pub fn write = (self: t, writer: any io.Writer) do
        writer.writeRecord(self).?
    end

    test "addition" {
        const testcase = record {
            a: t,
            b: t,
            want: t
        }

        //let t: @map(string, testcase) = .{
        let tests = [string, testcase]{
            "addition": .{
                num: new(1, 2),
                div: new(3, 4),
                want: new(4, 6)
            }
        }

        for k, v in tests do
            let result = v.a.add(v.b)
            @expect(result == v.want).?
            @println("test: #{k} passed")
        end
    }
}
