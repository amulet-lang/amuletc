const List = fn -> module (comptime 'a: type) {
    module {
        pub const t = record {
            const Self = @this()

            val: 'a,
            next: Option <| Self
        }

        pub const new = fn -> t (val: 'a) {
            t.{
                .val,
                .next = None
            }
        }

        pub const push = fn (mut self: &t, val: 'a) {
            if self.next == None {
                self.next = Some <| t.new(val)
            } else {
                let mut current = self.next
                while (current.next != None) {
                    current = current.next
                }

                current.next = Some <| t.new(val)
            }
        }
    }
}

const main = fn () {
    let mut list = List(int).new(12)
    list.push(16)

    @println("List: [{:?}, {:?}]", {list.val, list.next.val})
}
