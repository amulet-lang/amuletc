const List -> module = (comptime 'a: type) {
    module {
        pub const t = record {
            const Self = ruka.this()

            val: 'a,
            next: Option <| Self
        }

        pub const new -> t = (val: 'a) {
            t.{
                val,
                next = None
            }
        }

        pub const push(mut self: &t) = (val: 'a) {
            if self.next == None {
                sself.next = Some <| t.new(val)
            } else {
                let mut current = self.next
                while current.next != None {
                    current = current.next
                }

                current.next = Some <| t.new(val)
            }
        }
    }
}

const main = () {
    const IntList = List(int)
    let mut list = IntList.new(12)
    list.push(16)

    /* can also alias a modules when using it to simplify usages without importing it's symbols
        use List(int) as List

        let mut list = List.new(12)
        list.push(16)
    */
    ruka.println("List: [{}, {}]", {list.val, list.next.val})
}
