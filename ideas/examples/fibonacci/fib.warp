pub fn fibonacci -> int = (n) {
    const BUFFER_SIZE = 50;
    let mut cache = [BUFFER_SIZE]{0, 1, 1, -1};

    return fibonacci'(n, mut& cache); 
}

fn fibonacci' -> int = (n: int, arr: mut []int) {
    return match n {
        | _ when cache[n] != -1 => cache[n],
        | _ when n < 0          => 0,
        | _ => {
            cache[n] = fibonacci'(n-1) + fibonacci'(n-2)
            cache[n]
        }
    };
}

test `fibonacci` -> Result((), any) = () {
    use std;

    let result = fibonacci(5);
    std.testing.assert!(result == 5).!;

    return Ok <| ();
}
