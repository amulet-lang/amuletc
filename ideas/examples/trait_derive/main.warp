use std;

const Num = trait ('a) {
    (+): fn (lhs, rhs: 'a) -> 'a
};

derive Num = ('a) {
    fn (+) -> 'a = (lhs, rhs: 'a) {
        use warp.reflection;
        
        let mut result = 'a.{};

        for reflection.members('a) { |member|
            result.[member] = lhs.[member] + rhs.[member];
        }
    }
}

#[derive(Num)]
const Vector = record {
    x: int,
    y: int
};

fn add -> any Num = (x, y: any Num) {
    x + y
}

fn main = () {
    let a = Vector.{x: 10, y: 5};
    let b = Vector.{x: 5, y: 10};
    let c = add(a, b);

    std.testing.assert(c.x == 15 and c.y == 15);

    let d = 10;
    let e = 5;
    let f = add(d, e);

    std.testing.assert(f == 15);
}
