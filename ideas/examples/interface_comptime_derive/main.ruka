const Num = interface ('a) {
    (+): (rhs: &'a) -> 'a
}

const num -> type = (comptime 'a: type) do
    record {
        pub const t = 'a

        pub const (+) -> t = (lhs: &t, rhs: &t) do
            let mut result = t.{}

            for f in @type_info(t).Record.fields do
                @field(result, f) = @field(lhs, f) + @field(rhs, f)
            end
        end
    }
end

const Vector = record { x: int, y: int }
    |> num()
    |> @field(:t)

const add -> Num = (x, y: Num) do
    x + y
end

const main -> Result(unit) = () do
    let a = Vector.{ x = 10, y = 5 }
    let b = Vector.{ x = 5, y = 10 }
    let c = a + b

    @assert(c.x == 15 and c.y == 15).?

    let d = 10
    let e = 5
    let f = add(d, e)

    @assert(f == 15).?

    Ok <| ()
end
