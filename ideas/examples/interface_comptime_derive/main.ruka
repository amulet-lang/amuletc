const Num = interface (&'a) {
    (+): (&'a) -> 'a
}

fn num -> type = (comptime 'a: type) do
    pub fn (+) -> 'a = (lhs: &'a) (rhs: &'a) do
        let mut result = 'a.{}

        for f in @type_info('a).Record.fields do
            @field(result, f) = @field(lhs, f) + @field(rhs, f)
        end
    end

    'a
end

const Vector = record { x: int, y: int }
    |> num()

fn add -> Num = (x, y: Num) do
    x + y
end

fn main -> Result(unit) = () do
    let a = Vector.{ x = 10, y = 5 }
    let b = Vector.{ x = 5, y = 10 }
    let c = a + b

    @assert(c.x == 15 and c.y == 15).?

    let d = 10
    let e = 5
    let f = add(d, e)

    @assert(f == 15).?

    Ok <| ()
end
