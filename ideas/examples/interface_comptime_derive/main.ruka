const Num = interface (&'a) {
    (+): (&'a) -> 'a
}

fn num -> type = (comptime 'a: type) {
    pub fn (lhs: &'a).(+) -> 'a = (rhs: &'a) {
        let mut result = 'a.{}

        for f in @type_info('a).Record.fields {
            @field(result, f) = @field(lhs, f) + @field(rhs, f)
        }
    }

    'a
}

const Vector = record { x: isize, y: isize }
    |> num()

fn new = (x, y) {
    Vector.{ x, y }
}

fn add -> Num = (x, y: Num) {
    x + y
}

fn main -> !unit = () {
    let a = new(10, 5)
    let b = new(5, 10)
    let c = a + b

    @assert(c.x == 15 and c.y == 15).!
    @assert(@typeOf(a), @typeOf(c)).!

    let d = 10
    let e = 5
    let f = add(d, e)

    @assert(f == 15).!
}
