const Num = interface ('a) {
    (+): (rhs: &'a) -> 'a
}

const num -> module = (@'a: type) {
    module {
        const t = 'a;

        pub const (+)(lhs: &t) -> t = (rhs: &t) {
            let mut result = t.{}

            inline for member in @.members_of(t) {
                result.(member) = lhs.(member) + rhs.(member)
            }
        }
    }
}

const Vector = record {
    x: int,
    y: int
} |> num()

const add -> Num = (x, y: Num) {
    x + y
}

const main -> Result(unit) = () {
    let a = Vector.t.{.x = 10, .y = 5}
    let b = Vector.t.{.x = 5, .y = 10}
    let c = add(a, b)

    @.assert(c.x == 15 and c.y == 15)?

    let d = 10
    let e = 5
    let f = add(d, e)

    @.assert(f == 15)?

    Ok <| ()
}
