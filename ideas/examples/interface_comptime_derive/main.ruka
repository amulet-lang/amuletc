const Num = interface ('a) {
    (+)(&): (rhs: &'a) -> 'a
}

const num -> type = fn (comptime 'a: type) {
    pub const (+)(lhs: &'a) -> t = (rhs: &'a) {
        let mut result = t.{}

        inline for member in @.members_of('a) {
            result.(member) = lhs.(member) + rhs.(member)
        }
    }

    'a
}

const Vector = record {
    x: int,
    y: int
} |> num()

const add -> Num = fn (x, y: Num) {
    x + y
}

const main -> Result(unit) = fn () {
    let a = Vector.{.x = 10, .y = 5}
    let b = Vector.{.x = 5, .y = 10}
    let c = a + b

    @.assert(c.x == 15 and c.y == 15)?

    let d = 10
    let e = 5
    let f = add(d, e)

    @.assert(f == 15)?

    Ok <| ()
}
