const Num = interface ('a) {
    (+): (rhs: &'a) -> 'a
}

const num -> type = fn (comptime 'a: type) {
    record {
        pub const t = 'a

        pub const (+) -> t = fn (lhs: &t, rhs: &t) {
            let mut result = t.{}

            inline for f in @type_info(t).fields {
                @field(result, f) = @field(lhs, f) + @field(rhs, f)
            }
        }
    }
}

const Vector = record {x: int, y: int}
    |> num()
    |> @field(:t)

const add -> Num = fn (x, y: Num) {
    x + y
}

const main -> Result(unit) = fn () {
    let a = Vector.{.x = 10, .y = 5}
    let b = Vector.{.x = 5, .y = 10}
    let c = a + b

    @assert(c.x == 15 and c.y == 15)?

    let d = 10
    let e = 5
    let f = add(d, e)

    @assert(f == 15)?

    Ok <| ()
}
