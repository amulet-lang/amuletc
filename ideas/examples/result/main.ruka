const Result -> type = fn (comptime success: type) do
    variant {
        Ok(success),
        Err(Error) // predefined interface
    }
end

const parseError = struct {/* */}

// Implement the methods required by the Error interface
const msg = fn -> []u8 (err: &parseError) do/* */end
const location = fn -> []u8 (err: &parseError) do/* */end
const kind = fn -> []u8 (err: &parseError) do/* */end
const severity = fn -> Severity (err: &parseError) do/* */end

const parse -> Result(int) = fn (str: []u8) do
    if /* */ do
        return Err <| parseError.{}
    end
end

const main -> Result(unit) = fn () do
    let str: []u8 = "Hello"
    let result = parse(str[..])?
    @println("result: {d}", {result})

    Ok <| ()
end
