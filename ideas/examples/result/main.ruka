const Result = fn -> type (comptime success: type) {
    variant {
        Ok(success),
        Err(Error) // predefined interface
    }
}

const parseError = struct {/* */}

// Implement the methods required by the Error interface
const msg = fn -> []u8 (err: &parseError) {/* */}
const location = fn -> []u8 (err: &parseError) {/* */}
const kind = fn -> []u8 (err: &parseError) {/* */}
const severity = fn -> Severity (err: &parseError) {/* */}

const parse = fn -> Result(int) (str: []u8) {
    if /* */ {
        return Err <| parseError.{}
    }
}

const main = fn -> Result(unit) () {
    let str: []u8 = "Hello"
    let result = parse(str[..])?
    @println("result: {d}", {result})

    Ok <| ()
}
