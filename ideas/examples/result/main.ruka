fn Result -> type = (comptime success: type) do
    variant {
        Ok(success),
        Err(Error) // predefined interface
    }
end

const parseError = record {/* */}

// Implement the methods required by the Error interface
fn msg(err: &parseError) -> []u8 = () do/* */end
fn location(err: &parseError) -> []u8 = () do/* */end
fn kind(err: &parseError) -> []u8 = () do/* */end
fn severity(err: &parseError) -> Severity = () do/* */end

fn parse -> Result(int) = (str: []u8) do
    if /* */ do
        return Err <| parseError.{}
    end
end

fn main -> Result(unit) = () do
    let str: []u8 = "Hello"
    let result = parse(str[..]).?
    @println("result: {d}", {result})

    Ok <| ()
end
