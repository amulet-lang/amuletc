const Result -> type = (comptime success: type) {
    enum {
        Ok(success),
        Err(Error) // predefined interface
    }
}

const parseError = struct {/* */}

// Implement the methods required by Error
const msg(err: &parseError) -> []u8 = () {/* */}
const location(err: &parseError) -> []u8 = () {/* */}
const kind(err: &parseError) -> []u8 = () {/* */}
const severity(err: &parseError) -> Severity = () {/* */}

const parse -> Result(int) = (str: []u8) {
    if /* */ {
        return Err <| parseError.{}
    }
}

const main -> Result(unit) = () {
    let str: []u8 = "Hello"
    let result = parse(str[..])?
    @.println("result: {d}", {result})

    Ok <| ()
}
