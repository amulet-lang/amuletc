const Result = (comptime success: type) -> type do
    variant {
        Ok(success),
        Err(Error) // predefined interface
    }
end

const parseError = struct {/* */}

// Implement the methods required by the Error interface
const msg = () -> []u8 (err: &parseError) do/* */end
const location = () -> []u8 (err: &parseError) do/* */end
const kind = () -> []u8 (err: &parseError) do/* */end
const severity = () -> Severity (err: &parseError) do/* */end

const parse = (str: []u8) -> Result(int) do
    if /* */ do
        return Err <| parseError.{}
    end
end

const main = () -> Result(unit) do
    let str: []u8 = "Hello"
    let result = parse(str[..]).?
    @println("result: {d}", {result})

    Ok <| ()
end
