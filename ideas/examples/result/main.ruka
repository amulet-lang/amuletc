const string = @import("std").string

fn Result -> type = (comptime success: type) {
    variant {
        Ok(success),
        Err(std.Error) // predefined interface
    }
}

const parseError = variant {
    invalidUTF8
}

// Implement the methods required by the Error interface
fn (err: &parseError).msg      -> String = () {/* */}
fn (err: &parseError).location -> String = () {/* */}
fn (err: &parseError).kind     -> String = () {/* */}
fn (err: &parseError).severity -> Severity = () {/* */}

fn parse -> Result(int) = (str: string) {
    let word = /* */
    if word {
        /* */
    } else {
        return Err <| parseError.invalidUTF8
    }
}

fn main -> Result(unit) = () {
    let str: string = "Hello"
    let result = parse(str[..]).?
    @print("result: {d}\n", {result})

    Ok <| ()
}
